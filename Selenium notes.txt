TestNG Assertions: 

Assert.assertTrue()
Assert.assertFalse()
Assert.assertEquals()

Assert.assertTrue(true)

Driver: 
	driver.manage().window().maximize();
	

Select DropDown : 
		Select dropdown = new Select(driver.findElement(By.id("ctl00_mainContent_DropDownListCurrency")));
		dropdown.selectByIndex(3)
		dropdown.selectByVisibleText("AED");
        dropdown.selectByValue("INR");
        System.out.println(dropdown.getFirstSelectedOption().getText());

Xpath find child in parent Selector: 
"//div[contains(@data-url,'tokyo')]  //ul[@class='qty-list']"

Handling Alerts: (switch the context from the browser to alerts)
	driver.switchTo().alert().accept()
	driver.switchTo().alert().dismiss();
	driver.switchTo().alert().getText()
	
Code formatting and Debugging: 
First letter of a class name should be Capital, and camelCase for the rest 

Xpath selection using the text: 
//button[text()='Add to cart']

Programming Logic to iterate through arrays and add to cart ( Refer to GreenKart.java file)

Synchronization: 
	Implicit wait: applied to global level
	driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
	
	Explicit Wait: Applied to a specific element 
	WebDriverWait w = new WebDriverWait(driver, Duration.ofSeconds(5));
	w.until(ExpectedConditions.invisibilityOfElementLocated(By.className("promoInfo")));
	
	Fluent Wait: 

Actions, Frames and Child windows handling: 
	Actions (Mouse and keyboard actions): 
	MouseOver:
	Actions a = new Actions(driver);
	a.moveToElement(driver.findElement(By.cssSelector("#nav-link-accountList")))
                .build()
                .perform();
	.keyDown(Keys.SHIFT)
	.DoubleClick()
	.ContextClick() to right click
	
	Child Windows: 
	    Set<String> windows = driver.getWindowHandles();
        //switch to child window
        Iterator<String> it = windows.iterator();
        //get first index in the Set
        String parentId = it.next();
        // go into the second by using .next() again
        String childId = it.next();
        driver.switchTo().window(childId);
	Frames: 
		driver.switchTo().frame(driver.findElement(By.className("demo-frame")));
		driver.switchTo().frame("frame-top");
		by name or by webElement, or by index
	Drag And Drop : 
	    Actions a = new Actions(driver);
        a.dragAndDrop(driver.findElement(By.id("draggable")), driver.findElement(By.id("droppable")))
                .build().perform();
	Switch back to the default window: 
	driver.switchTo().defaultContent();
				
				
	Get count of all the links in a page: 
	System.out.println(driver.findElements(By.tagName("a")).size());
	
	//find elements inside a webElement (limiting webdriver scope)
    WebElement footerDriver = driver.findElement(By.id("footer"));
    System.out.println(footerDriver.findElements(By.tagName("a")).size());
	//limiting scope even further
    WebElement columnDriver = footerDriver.findElement(By.xpath("//table/tbody/tr/td[1]/ul"));
	
	//pass keys as text with SendKeys() by passing a sequence of keys using key.chord()
	String clickOnLinkTab = Keys.chord(Keys.CONTROL, Keys.ENTER);
	
    for(int i=1;i<firstColumn.findElements(By.tagName("a")).size();i++){
    firstColumn.findElements(By.tagName("a")).get(i).sendKeys(clickOnLinkTab);
    }
	
	//iterate through opened tabs 
	Set<String> windows = driver.getWindowHandles();
    Iterator<String> it = windows.iterator();

	//hasNext() Returns true if the iteration has more elements.
	//it.next() pass to the next
    while(it.hasNext()){
		driver.switchTo().window(it.next());
		System.out.println(driver.getTitle());
    }
	if(dates.get(i).getText().equalsIgnoreCase("24"))
	if(dates.get(i).getText().contains("24"))
	
	Window Srolling: 
	(executing a JavaScript script that allow us to scroll by using javascript executer) 
	JavascriptExecutor js = (JavascriptExecutor) driver;
    //.executeScript() method to provide the script
    js.executeScript("window.scrollBy(0,500)"); //x,y indexes
	
	Table scrolling:
	//using DOM to get the table and using method scrollTop
	js.executeScript("document.querySelector('.tableFixHead').scrollTop=5000");
	
	Handle Table Grids:
	List<WebElement> values = driver.findElements(By.cssSelector("#product td:nth-child(4)"));
	Parsing Strings into Integers:
	sum += Integer.parseInt(values.get(i).getText());
	
	$(".totalAmount") //use in the console to verify selectors, without the selectorHub plugin
	
	//chaining the findElemen
	List<WebElement> secondrow=table.findElements(By.tagName("tr")).get(2).findElements(By.tagName("td"));
	
	Miscellaneous topics: 
	
	Handling HTTPS certifications in different browsers using chrome options: 
	
	//setting behavior for chrome
    ChromeOptions options = new ChromeOptions();
    options.setAcceptInsecureCerts(true); //bypass ssl
    FirefoxOptions firefoxOptions = new FirefoxOptions();
    //passing the options in the driver
    WebDriver driver = new ChromeDriver(options);
    driver.get("https://expired.badssl.com/");
	
	//open browser with extensions
	//add proxy
	
        //Maximizing the window
        driver.manage().window().maximize();
        //delete all the cookies
        driver.manage().deleteAllCookies();
        //delete a specific cookie by name
        driver.manage().deleteCookieNamed("nameOfCookie");
		
	    //taking a screenshot as a FILE
		//Casting the driver ((TakeScreenshot)driver)
        File src = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
        //moving the screenshot to our system
        FileUtils.copyFile(src, new File("C:/Users/emkrimi/Desktop/screenShot.png"));
		
		//Checking broken links
		//by checking their status called when called using java methods
		Getting the link href using getAttribute
		String href = driver.findElement(By.linkText("Broken Link")).getAttribute("href");
		//opening a connection with the href and getting the response code
		HttpURLConnection connection = (HttpURLConnection)new URL(href).openConnection();
        connection.setRequestMethod("HEAD");
        connection.connect();
        int resCode = connection.getResponseCode();
        System.out.println(resCode);
		
		//Iterate through all the links and check for broken links
		    for(WebElement link:links){
            String a = link.getAttribute("href");
            HttpURLConnection con = (HttpURLConnection)new URL(a).openConnection();
            con.setRequestMethod("HEAD");
            con.connect();
            int rc = con.getResponseCode();
            if(rc>400){
                System.out.println(link.getText() + " is broken with Status code " + rc);
                //fail the test
                Assert.assertTrue(false);
            }
        }
		//Soft Assertions ( stores all failures and assert them later when called with assertAll() ) 
		//unline hard assertions, the script doesnt stop when it fails, it continues till the end and stores 
		all the failures
		SoftAssert as = new SoftAssert();
		//the iterations through all links with soft assertions
		    for(WebElement link:links){
            String a = link.getAttribute("href");
            HttpURLConnection con = (HttpURLConnection)new URL(a).openConnection();
            con.setRequestMethod("HEAD");
            con.connect();
            int rc = con.getResponseCode();
            //soft Assertions saves the assertion failures and doesn't stop the loop when it fails
            as.assertTrue(rc<400,link.getText() + " is broken with Status code " + rc);
        }
            //call assertAll() to fail the test if there is a failure and report
            as.assertAll();

		//check if a string starts with a letter
		name.startsWith("A");

		Java Streams: (Java 8)
		Filter:
		//filtering an array using stream
		//converting the array into a steam and applying filter
		//filter gets executed when the condition is true
		//use {} for the condition if there are multiple lines
        Long c = names.stream().filter(s -> s.startsWith("E")).count(); //counts the names that start with E
        //using stream directly
        Long b = Stream.of("Milan","Napoli","Atalanta","Juve").filter(t -> t.startsWith("A")).count();

        Map : (help modify the result of a stream)
        //print names which end with "E" and Uppercase them
        Stream.of("Vidic","West Brown","Rio","Evra","Gary Neveille").filter(n -> n.endsWith("e")).map(n -> n.toUpperCase())
                        .forEach(s -> System.out.println(s));
        //print names that start with N, uppercased and sorted using .sorted()
        List<String> langs = Arrays.asList("Java","JavaScript","C#","C++","CocaCola");
        langs.stream().filter(s -> s.startsWith("C")).sorted().map(s -> s.toUpperCase()).forEach(s -> System.out.println(s));

        //Merging and concatenating two arrays
        Stream<String> newStream = Stream.concat(names.stream(), langs.stream());
        newStream.sorted().forEach(s -> System.out.println(s));

        //find element in array using anyMatch()
        boolean flag = Stream.of("Pizza","Raviolli","Parmesano").anyMatch(s -> s.equalsIgnoreCase("pizza"));
        Assert.assertTrue(flag);

        //Collect: converts the results of Streams to a list
        List<String> ls = Stream.of("Ciro","Del Piero","Totti","Cannavaro").filter(s -> s.endsWith("o"))
                        .map(s -> s.toUpperCase()).collect(Collectors.toList());

        //remove duplicates using distinct()
                List<Integer> nums = Arrays.asList(1,2,3,3,3,5,5,5,4,4,9,9);
                nums.stream().distinct().sorted().forEach(n -> System.out.println(n));

        //Relative Locators
        //Above()
        WebElement nameEditBox = driver.findElement(By.cssSelector("form input[name='name']"));
        driver.findElement(with(By.tagName("label")).above(nameEditBox));
        WebElement label = driver.findElement(By.cssSelector("[for='dateofBirth']"));
        driver.findElement(with(By.tagName("input")).below(label)).click(); //relative locator skip elements that has 'flex'
        //relative locator toLeftOf()
        WebElement text = driver.findElement(By.cssSelector("label[for='exampleCheck1']"));
        driver.findElement(with(By.tagName("input")).toLeftOf(text)).click();
        //relative locator toRightOf()
        WebElement radio = driver.findElement(By.id("inlineRadio1"));
        System.out.println(driver.findElement(with(By.tagName("label")).toRightOf(radio)).getText());

        //opening new tabs/windows
        driver.switchTo().newWindow(WindowType.TAB);
        driver.switchTo().newWindow(WindowType.WINDOW);
        //Then we should switch to the new tab/window using windowsHandles and iterator

        //Take a partial screenshot of the web element only
        //Take a partial Screenshot of the web Element "name"
        File file = name.getScreenshotAs(OutputType.FILE);
        //Convert the file into a png and save it
        FileUtils.copyFile(file, new File("C:/Users/emkrimi/Desktop/element.png"));

        //Capturing the Height and Width of a Web element
        System.out.println(name.getRect().getDimension().getHeight());
        System.out.println(name.getRect().getDimension().getWidth());

        //Framework 1: TestNG
        To run TestNG:
            use @test annotation followed by the method. example:
                @Test
                public void demo(){
                    System.out.println("hello");
                }
            You can define multiple tests in a single class.
        Create TestNG.xml (install "Create TestNG XML" in IntelliJ) : Right click on project => Create TestNG XML
        Project xml structure: Test Suite => Test Folder(Shell) => Test Cases
        Run All the tests (Test suite) in the TestNG xml file: Right click on the TestNG xml file => Run...

        We can create multiple TestNG xml files

        Modifying the TestNG xml file by adding new <test> and fill it with the <classes> we want to run inside it.
            Example: <test name="my test"><classes><class name="package.classname"><methods><include name="classname"/>
            We use Self closing tags like <include name="classname"/> when there is one line of code in it.

        Include And Exclude TestCases:
        To exclude a method in the TestNG xml: we add the tag <exclude name="MobileSearch"/>
        To include a method in the test, we use include <include name="MobileTab"/>

        Using Regular expression to execute test cases:
        Ex: Excluding all the method that start with the word "Mobile" by adding .*
        <exclude name="Mobile.*"/>

        Running test case on Package level(folder) ex: "test" in the TestNG xml file
        <packages><package name="test"/></packages>

        TestNG Annotations:
        TestNG annotations come before methods(tests)
        @BeforeTest : Gets executed FIRST before any test in the test folder <test>
        @AfterTest : Gets executed AFTER Tests in the folder <test>

        Suite has all the tests in a TestNG xml file.
        @BeforeSuite : Runs before all the tests in the suite
        @AfterSuite: Runs after all the tests in the suite

        @BeforeMethod : Runs before EACH method => test block
        @AfterMethod: Runs after each method

        @AfterClass: Runs before executing any method in the Class
        @BeforeClass: runs after executing all methods in class

        Run different test from different classes using GROUPS
        we use : @Test(groups={"Smoke"})
        In the TestNG xml file (before the classes tag) we use :
        <groups><run><include name="Smoke"/><run/><groups/>
        We can also use exclude to run all tests except the ones with the tag "smoke"
        <groups><run><exclude name="Smoke"/><run/><groups/>

        Helper Annotations:

        Executing a test case depending on another test case(method) ex: MobileLogin
        @Test(dependsOnMethods = {"MobileLogin"})
        Executing multiple methods before a test case
        @Test(dependsOnMethods = {"MobileLogin","MobileAPI"})

        Skip a test case while executing:
        @Test(enabled = false)

        Setting a timeOut for a particular method only:
        @Test(timeOut = 4000)

        Parameterizing from TestNG xml file:(drive data from TestNG xml file)

        Parameter Defined under the <suite> tag is applicable to all the tests in the suite
        Parameter Defined inside the <test> tag, is applicable to only the tests inside that <test> folder. (for unique data for each test)
        <parameter name="url" value="https://fb.com"/>
        To use in the test :
        @Parameters({"url"})
        @Test
        public void MobileLogin(String nameUrl){System.out.println(nameUrl);} nameUrl gets the value of url
        Defining multiple parameters and passing them in tests:
        <parameter name="url" value="https://fb.com"/>
        <parameter name="name" value="necro"/>
        To use in test: @Parameters({"url","name"})
        public void MobileLogin(String nameUrl, String name){System.out.println(nameUrl + name);}

        Parameterizing with multiple data sets: Using DataProvider annotations to iterate through multiple sets of data
        Using @DataProvider annotation and multi dimensions array Object[][]
        Example:
        @DataProvider
            public Object[][] getData(){
                Object[][] data = new Object[3][2];
                // three sets of data with 2 inputs ex
                data[0][0] = "oneUsername";
                data[0][1] = "onePassword";
                //Second set
                data[1][0] = "twoUsername";
                data[1][1] = "twoPassword";
                //third set
                data[2][0] = "threeUsername";
                data[2][1] = "threePassword";
                return data;
            }
        To use the data in a test: We use the annotation @Test(dataProvider="getData") getData is the name of the method with the data
        @Test(dataProvider="getData")
            public void morning(String username, String password){System.out.println("morning " + username + password);}
        It will iterate through all the rows and print the two data inputs username and password

        We can pass the data from the TestNG xml file or from the test class by Using DataProvider annotation helper attribute

        TestNG Listeners:(interfaces)
        Listeners listen to the test case results and status
        To use listeners, we create a java class ex: "listeners" and we implement ITestListener inside
        public class Listeners implements ITestListener {}
        Then we create ITestListener methods inside such: onStart, onTestFailure, onTestSuccess ... And put code inside
        These methods will be executed depends on the event happening(failure, success, start, finish...)
        We need to Define the Listeners in the TestNG xml file right after the <suite> tag:
        <listeners><listener class-name="folderName.Listeners"/></listeners> class-name=class pathname
        Get result info from the Listeners using result object and its methods:
        Example:
        public void onTestFailure(ITestResult result) {
        System.out.println(result.getName());
        }

        Running tests in parallel with TestNG:
        To run test in parallel mode we edit the <suite> tag with parallel and thread-count attributes:
        <suite name="All Test Suite" parallel="tests" thread-count="3">

        if we want to run classes on parallel mode we add the same attributes parallel and thread-count to the <test> tag
        <test name="Second test" parallel="classes" thread-count="2">

        Inheritance and TestNG:
        public class ps{
            public void doThis(){}
            @BeforeMethod
        }
        ps1 inherit from ps
        we can not use main() and use @Test directly and methods
        @BeforeMethod gets run too because the child class scans all the methods the parent class
        child class is aware of everything in the parent class
        public class ps1 extends ps {
            @Test
            public void testReturn(){
            doThis(); //inherited from ps
            }
        }
        if there is no inheritance, we need to create and object of the class before we can use its methods and variables
        PS ps = new PS();
        ps.doThis();

        Pass values from test through Parameterized Constructor and this keyword:

        There is basically two ways to get data from other classes, inheritance and creating objects of classes
        Constructor concept:(created by the help of the IDE suggestion)
        Sending parameters to a class so it can be passed automatically in the methods from it
        Example: PS ps = new PS(3); 3 is the parameter
        Then you dont need to send the 3 in ps.doThis()
        in the PS class: the constructor looks something like this
        public PS (int a){
        this.a=a;
        }
        this refers to current class variable
        a gets its value from the parameter we passed in PS ps = new PS(3);

        User Super() in child class constructor = (results in) parent class constructor is invoked
        Super(a) is only used when there is inheritance in place
        'a' is an argument received from test case and it will be transferred into parent constructor.

        Create a Maven project

        POM: page object model
        Create a class in src/main/java called landingPage
        Create a constructor class to initialize the driver
        public landingPage(Webdriver driver){
        this.driver=driver;
        }
        In the test, we need to create an object of the class LandingPage() and pass the driver
        LandingPage landingpage = new LandingPage(driver);

        Page Factory:
        instead of using WebElement username = driver.findElement(By.id("userEmail"));
        Use: @FindBy(id="userEmail")
             WebElement email; //will be saved under the variable email
        use xpath= css= id= tagName= (click on @FindBy to know more)
            @FindBy(css=".m3")
            List<WebElement> products; // findElements
        To use the PageFactory, we need to initialize it in the constructor by adding
        PageFactory.initElements(driver, this);

        Creating an action method:
        //passing the elements(page factory elements)
        public void login(String mail, String password){
            email.sendKeys(mail);
            password.sendKeys(password);
            submit.click();
        }
        Call the method in the test:
        LandingPage.login("me@gmail.com","pass123");

        Abstract components : (re usable components) visibilityOfElements, implicitWaits,... Elements that are common in the whole app
        A parent class to other page object model classes (they inherit from this one)
        After creating a constructor and getting the driver from child classes that inherit from this class by using super super(driver);
        we need to catch it in the parent constructor by using this
        //defining a varibale webdriver and catching it then passing it in the constructor
        WebDriver driver;
        public AbstractComponents (WebDriver driver){
        this.driver=driver;
        }
        In the class we can define a method like this:
        By productsBy = By.css(".md3");
        public void WaitForElement(By findBy){ //passing By in the method
            WebDriverWait wait = new WebDriverWait(driver, Duration.OfSeconds(5)),
            wait.until(ExpectedConditions.VisibilityOfElementLocated(productsBy));
        }
        Using the abstractComponent method in one of the pom classes
        public List<WebElement> productsList(){
        WaitForElement(".im3");
        return products;
        }
        OOP: pass variable from child to parent using super()
        child classes have access to parent class methods

        Stream filter if you want to retrieve the element
                Anymatch: if you want to verify the existence of the element

        Drive object creation within POM classes(when action methods land on a new page, add the creation of that page class in the method)
        Create global variables in top of the class before all the methods so they can be accessible to all methods
        Ex: WebDriver driver;
            LandingPage LP;
        Test Configuration:

        Create a base test with reusable test configuration

        //properties class:
        create a file globalData.properties
        add: browser=chrome
        Using the file by getting data from it in the base test class:
        Properties prop= new Properties();
        FileInputStream fis = new FileInputStream("location of file properties");
        prop.load(fis);
        //getting the property
        String browserName = prop.getProperty("browser")
        if(browserName.equalsIgnoreCase("chrome")) use chrome driver
        else if browserName.equalsIgnoreCase("firefox") use firefox driver

        Group tests togheter(all login test in same class, catalogue test in class...)
        @BeforeMethod(alwaysRun=true) // to always run no matter what grouping is applied
        Object[][] names = new Object[][] {{"",""},{"",""}};
        Using HashMap to pass data for the DataProvider (Section 21: Lecture 173)

        Driving data from Json files to hashmaps: data.json
        public getJsonData(){
            //convert json to string
            String JsonString = FileUtils.readFileToString(new File("jsonFilePath"));
            //String to HashMap using dependency "Jackson databind" add it to pom.xml
            ObjectMapper mapper = new ObjectMapper();

            Get the project path: System.getProperty("user.dir")

            HTML reports: Extent reports
            MavenRepo -> Extentreports-> add to pom.xml
            path to save reports: System.getProperty("user.dir")+"\\reports\\index.html"

            will be using two classes, ExtentReports and ExtentSparkReporter
            public void config(){
            String path = System.getProperty("user.dir")+"\\reports\\index.html";
            ExtentSparkReporter reporter = new ExtentSparkReporter(path);
            reporter.config().setReportName("myReport");

            }

            Test Execution from Maven And integration with Jenkins:
            Using "Suite xml files" plugin
            Add plugin to pom.xml under plugins

            to add TestNG xml files in the pom.xml:
            Create <profiles><profile>
            <id>Purchase</id>
            And copy the whole code inside <build> and add the TestNG xml file path to
            <suiteXmlFile>TestFolder/purchase.xml</suiteXmlFile>

            In the terminal: (make sure you are in the project path)
            mvn test : to run all tests
            mvn test -PPurchase : -P to run a profile

            Set Global Variables/Values from mvn command: (the ones in the file.properties)
            mvn test -Dbrowser=FireFox : -D for mvn parameters
            Data sent from maven is system property: use System.getProperty to access it
            System.getProperty("browser") => firefox

            Jenkins: new job -> freestyle -> advanced -> use custom workspace -> (paste the location of the project)
            Build -> invoke top level maven target -> past mvn commands in Goals (mvn not required, paste them without "mvn")
            Save.
            Parametrizing the jenkins job:
            Configure -> This project is parametrized -> add parameter -> choice parameter ->
            choice name: browserName
            choices: chrome, firefox, edge
            -> Save
            Change the mvn command to:
            test -PProdcution -Dbrowser="$browserName"
            Build with parameters -> firefox -> build

            Cucumber:
            Given: preconditions
            When: Describe the user actions
            And: for additional actions (And + then are used as much as needed)
            Then: expected output
            But: for negative output

            example:
            Scenario: make minimum due payment
            Given: user is on pay credit card page
            When: user fills all details and select minimum amount options
            And: user clicks on Pay button
            Then: credit card confirmation page is displayed
            But: error message is displayed

            Setting up cucumber into our framework:
            getting the dependency : mvn repo: cucumber java and cucumber testng
            install cucumber plugin
            Create new feature file : Purchase.feature
                feature: purchase the order
                Backgroud: /run before each scenario
                Given i landed on Ecommerce page

                Scenario Outline: Valid submit of an order
                Given user logged in with valid <username> and <password>
                When user add <product> to cart
                And checkout and submit the order
                Then Thank you message is displayed

                Examples:
                |username|password|product|
                |necro|pass123|shoes|

            Code implementation with Cucumber:
            stepDefinitions implementation
            Create stepDefinition.java class
                public class StepDefinitionImp(){
                @Given("Given i landed on Ecommerce page")
                    public void goToEcom(){
                    //this code will be executed with the step
                    }
                    //using regular expression to pass the values of username and password ^ (.+) $
                @Given("^Given user logged in with valid username (.+) and password (.+)$")
                    public void loggedIn(String username, String password){
                        //code to login
                    }
                }





        }







